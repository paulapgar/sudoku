(()=>{"use strict";class e{constructor(){this._knownNum=0,this._possNumsArray=[]}populatePossNums(e){for(let t=0;t<e;t++)this._possNumsArray.push(!0)}clearPossNums(){this._possNumsArray.fill(!1)}hasPossNum(e){return this._possNumsArray[e-1]}getPossNums(){let e=[];for(let t=0;t<this._possNumsArray.length;t++)!0===this._possNumsArray[t]&&e.push(t+1);return e}onePossNumLeft(){let e=this.getPossNums();return 1===e.length?e[0]:0}removePossNum(e){this._possNumsArray[e-1]=!1}get knownNum(){return this._knownNum}set knownNum(e){this._knownNum=e,this.clearPossNums()}}class t{static appendText(e,t){e.value+=t+"\n"}}class l{}class s{}s.origText=document.getElementById("OriginalPuzzle"),s.scanText=document.getElementById("ScannedPuzzle"),s.scanButton=document.getElementById("scan"),s.puzzleSelect=document.getElementById("puzzles");class o{constructor(t){switch(this._boardSize=0,this._blockSize=0,this._needEval=!1,this._setupDone=!1,this._puzzleLabel="",this._cells=new Map([]),this._boardSize=t.size,this._puzzleLabel=t.label,this._boardSize){case 9:this._blockSize=3;break;case 16:this._blockSize=4;break;default:console.log("Invalid boardSize!")}for(let l=0;l<t.size;l++)for(let s=0;s<t.size;s++){let o=new e;o.populatePossNums(t.size),this._cells.set(this.getCellNum(l,s),o)}for(let e=0;e<t.size;e++)for(let l=0;l<t.size;l++)t.board[e][l]>0&&this.setCellKnown(l,e,t.board[e][l])}getCellNum(e,t){return e*this._boardSize+t}getCell(e,t){return this._cells.get(this.getCellNum(e,t))}getCellKnown(e,t){return this.getCell(e,t).knownNum}setCellKnown(e,l,o){this.getCell(e,l).knownNum=o,this.needEval=!0,!0===this.setupDone&&t.appendText(s.scanText,`Set cell (${e},${l}) to ${o}`),this.clearColumn(e,o),this.clearRow(l,o),this.clearBlock(e,l,o)}clearColumn(e,t){for(let l=0;l<this._boardSize;l++)this.getCell(e,l).removePossNum(t)}clearRow(e,t){for(let l=0;l<this._boardSize;l++)this.getCell(l,e).removePossNum(t)}clearBlock(e,t,l){let s=Math.floor(e/this._blockSize)*this._blockSize,o=Math.floor(t/this._blockSize)*this._blockSize;for(let e=s;e<s+this._blockSize;e++)for(let t=o;t<o+this._blockSize;t++)this.getCell(e,t).removePossNum(l)}static processBoardOnePossible(e){for(let t=0;t<e.boardSize;t++)for(let l=0;l<e.boardSize;l++){let s=e.getCell(t,l).onePossNumLeft();if(s>0)return e.setCellKnown(t,l,s),!0}return!1}static processBoardBlockSingleNumber(e){let t,l;t=e.boardSize/e.blockSize,l=e.boardSize/e.blockSize;for(let s=0;s<t;s++)for(let o=0;o<l;o++){let r=new Map;for(let t=1;t<=e.boardSize;t++)r.set(t,[]);for(let a=s*t;a<s*t+t;a++)for(let t=o*l;t<o*l+l;t++)0===e.getCell(a,t).knownNum&&e.getCell(a,t).getPossNums().forEach((e=>{var l;let s=null!==(l=r.get(e))&&void 0!==l?l:[];s.push([a,t]),r.set(e,s)}));r.forEach(((t,l)=>{if(1===t.length)return e.setCellKnown(t[0][0],t[0][1],l),!0}))}return!1}static processBoardOnePossibleInRow(e){for(let t=0;t<e.boardSize;t++)for(let l=0;l<e.boardSize;l++)if(0===e.getCellKnown(t,l)){let t=new Map;for(let l=1;l<=e.boardSize;l++)t.set(l,[]);for(let s=0;s<e.boardSize;s++)0===e.getCell(s,l).knownNum&&e.getCell(s,l).getPossNums().forEach((e=>{var o;let r=null!==(o=t.get(e))&&void 0!==o?o:[];r.push([s,l]),t.set(e,r)}));t.forEach(((t,l)=>{if(1===t.length)return e.setCellKnown(t[0][0],t[0][1],l),!0}))}return!1}static processBoardOnePossibleInColumn(e){for(let t=0;t<e.boardSize;t++)for(let l=0;l<e.boardSize;l++)if(0===e.getCellKnown(t,l)){let l=new Map;for(let t=1;t<=e.boardSize;t++)l.set(t,[]);for(let s=0;s<e.boardSize;s++)0===e.getCell(t,s).knownNum&&e.getCell(t,s).getPossNums().forEach((e=>{var o;let r=null!==(o=l.get(e))&&void 0!==o?o:[];r.push([t,s]),l.set(e,r)}));l.forEach(((t,l)=>{if(1===t.length)return e.setCellKnown(t[0][0],t[0][1],l),!0}))}return!1}static processBoardStep(e){e.needEval=!1,t.appendText(s.scanText,"Scanner #1 try"),o.processBoardBlockSingleNumber(e)||(t.appendText(s.scanText,"Scanner #2 try"),o.processBoardOnePossible(e)||(t.appendText(s.scanText,"Scanner #3 try"),o.processBoardOnePossibleInRow(e)||(t.appendText(s.scanText,"Scanner #4 try"),o.processBoardOnePossibleInColumn(e))))}static printBoard(e,l){let s,o,r=e.boardSize>9?2:1,a=e.boardSize;for(let n=0;n<a;n++){let i=[];for(let t=0;t<a;t++)s=e.getCell(t,n),s.knownNum>0?(o=s.knownNum.toString(),i.push(`[${o.padStart(r)}]`)):i.push(`[${" ".repeat(r)}]`);t.appendText(l,i.join(""))}}get boardSize(){return this._boardSize}set boardSize(e){this._boardSize=e}get puzzleLabel(){return this._puzzleLabel}set puzzleLabel(e){this._puzzleLabel=e}get blockSize(){return this._blockSize}set blockSize(e){this._blockSize=e}get setupDone(){return this._setupDone}set setupDone(e){this._setupDone=e}get needEval(){return this._needEval}set needEval(e){this._needEval=e}}const r=[{name:"Puzzle1",label:"Puzzle #1 (Easy)",size:9,board:[[0,6,0,0,0,0,0,1,0],[1,0,0,2,0,0,7,0,3],[0,0,0,6,0,9,0,8,0],[0,7,5,0,0,0,9,0,0],[0,0,0,0,5,0,0,0,0],[0,0,2,0,0,0,5,4,0],[0,8,0,1,0,6,0,0,0],[5,0,3,0,0,2,0,0,8],[0,9,0,0,0,0,0,2,0]]},{name:"Puzzle250403",label:"Puzzle#250403 (Easy)",size:9,board:[[0,0,0,0,7,5,0,0,0],[0,5,0,1,4,0,0,0,0],[7,0,0,0,0,0,0,0,0],[0,6,0,0,0,0,0,0,0],[8,0,4,3,1,0,0,0,9],[0,0,2,0,0,0,6,0,4],[0,0,0,0,8,0,0,3,0],[0,0,5,9,0,4,0,7,6],[0,3,1,0,0,0,4,0,0]]},{name:"Puzzle38",label:"Puzzle #38 (Easy)",size:9,board:[[0,1,0,7,0,8,9,0,0],[3,0,0,0,0,9,0,8,0],[0,0,0,0,5,2,0,0,6],[8,0,0,0,7,0,2,4,9],[0,0,4,8,9,3,1,0,0],[9,5,7,0,4,0,0,0,3],[7,0,0,9,2,0,0,0,0],[0,6,0,3,0,0,0,0,2],[0,0,9,6,0,5,0,7,0]]},{name:"Puzzle?Easy",label:"Puzzle ?? (Easy)",size:9,board:[[0,0,0,0,1,0,0,2,9],[0,7,0,0,0,0,0,0,0],[5,0,0,0,7,0,6,0,0],[1,0,0,0,0,2,0,0,6],[0,0,0,3,0,0,9,0,7],[0,0,0,0,5,9,0,0,4],[0,0,0,6,0,7,0,0,0],[8,0,7,0,0,4,3,0,0],[0,4,5,0,0,0,0,0,0]]},{name:"Puzzle88",label:"Puzzle #88 (Medium)",size:9,board:[[0,0,0,1,9,0,0,7,0],[0,0,8,0,0,0,0,0,3],[0,4,0,0,0,6,0,0,0],[9,0,0,0,1,0,6,0,0],[1,0,0,5,0,3,0,0,8],[0,0,4,0,7,0,0,0,2],[0,0,0,7,0,0,0,8,0],[6,0,0,0,0,0,7,0,0],[0,3,0,0,4,8,0,0,0]]},{name:"Puzzle94",label:"Puzzle #94 (Medium)",size:9,board:[[0,3,1,0,0,0,0,0,0],[7,0,8,0,2,0,0,0,1],[0,0,0,8,0,0,4,0,0],[0,7,0,0,3,6,0,0,0],[0,4,6,0,0,0,2,3,0],[0,0,0,5,7,0,0,4,0],[0,0,5,0,0,8,0,0,0],[6,0,0,0,5,0,1,0,2],[0,0,0,0,0,0,3,6,0]]},{name:"Puzzle153",label:"Puzzle #153 (Medium)",size:9,board:[[8,0,0,3,0,0,4,0,1],[0,9,0,0,0,7,2,0,0],[7,3,0,0,5,1,0,0,0],[0,8,0,0,0,4,3,0,0],[0,0,3,0,7,0,5,0,0],[0,0,9,6,0,0,0,1,0],[0,0,0,8,4,0,0,6,3],[0,0,6,7,0,0,0,5,0],[5,0,8,0,0,3,0,0,4]]},{name:"Puzzle174",label:"Puzzle #74 (Hard)",size:9,board:[[0,0,8,0,0,0,4,0,0],[0,0,0,4,0,5,0,0,0],[9,0,7,0,0,0,2,0,6],[0,6,0,0,3,0,0,7,0],[0,0,0,8,5,9,0,0,0],[0,8,0,0,7,0,0,1,0],[1,0,4,0,0,0,3,0,8],[0,0,0,2,0,3,0,0,0],[0,0,6,0,0,0,7,0,0]]},{name:"Puzzle205",label:"Puzzle #205 (Hard)",size:9,board:[[0,9,0,0,3,0,6,0,0],[6,0,2,1,0,0,0,0,0],[0,0,0,0,0,4,0,0,5],[0,8,6,3,0,0,7,0,0],[9,0,5,0,8,0,0,0,6],[0,0,0,0,0,6,9,5,0],[1,0,0,4,0,0,0,0,0],[0,0,0,0,0,2,5,0,3],[0,0,4,0,6,0,0,7,0]]},{name:"Puzzle213",label:"Puzzle #213 (Hard)",size:9,board:[[0,0,9,7,0,0,6,0,3],[6,0,2,0,0,0,0,4,0],[7,0,0,4,2,0,0,0,0],[0,0,1,0,0,7,0,9,0],[9,0,0,5,0,2,0,0,4],[0,6,0,3,0,0,2,0,0],[0,0,0,0,7,3,0,0,1],[0,7,0,0,0,0,4,0,9],[5,0,8,0,0,4,7,0,0]]},{name:"Puzzle245",label:"Puzzle #245 (Hard)",size:9,board:[[0,0,0,0,0,7,5,0,0],[5,0,0,3,0,0,0,0,0],[6,0,7,0,0,0,0,0,2],[0,0,2,0,0,3,7,0,0],[0,0,0,0,5,0,0,0,0],[0,0,3,4,0,0,8,0,0],[3,0,0,0,0,0,4,0,8],[0,0,0,0,0,4,0,0,9],[0,0,1,5,0,0,0,0,0]]},{name:"Puzzle245b",label:"Puzzle #245b (Hard)",size:9,board:[[0,9,0,8,0,0,0,0,0],[0,0,0,1,6,0,9,0,7],[6,0,2,0,0,0,0,8,0],[3,0,0,0,0,9,0,5,2],[0,0,5,4,0,3,8,0,0],[9,8,0,6,0,0,0,0,4],[0,2,0,0,0,0,5,0,1],[5,0,9,0,7,1,0,0,0],[0,0,0,0,0,8,0,4,0]]}];for(const e in r){const t=document.createElement("option");t.value=r[e].name,t.text=r[e].label,s.puzzleSelect.add(t)}s.scanButton.addEventListener("click",(function(){if(l.board&&!1!==l.board.setupDone&&l.board){s.scanText.value="";let e=-1;for(;!0===l.board.needEval;)o.processBoardStep(l.board),e++;t.appendText(s.scanText,`Finished With Board  (${e} moves)`),o.printBoard(l.board,s.scanText),s.scanText.scrollTop=s.scanText.scrollHeight,l.board.setupDone=!1}})),s.puzzleSelect.addEventListener("change",(function(){if("Choose"!==s.puzzleSelect.value){for(const e in r)r[e].name===s.puzzleSelect.value&&(l.board=new o(r[e]));s.origText.value="",s.scanText.value="",t.appendText(s.origText,`Initial Board: ${l.board.puzzleLabel}`),o.printBoard(l.board,s.origText),l.board.setupDone=!0}else s.origText.value="",s.scanText.value="",l.board.setupDone=!1}))})();