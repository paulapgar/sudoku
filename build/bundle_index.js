(()=>{"use strict";var e={848:e=>{e.exports=JSON.parse('{"puzzleList":[{"name":"Puzzle1","label":"Puzzle #1 (Easy)","size":9,"board":[[0,6,0,0,0,0,0,1,0],[1,0,0,2,0,0,7,0,3],[0,0,0,6,0,9,0,8,0],[0,7,5,0,0,0,9,0,0],[0,0,0,0,5,0,0,0,0],[0,0,2,0,0,0,5,4,0],[0,8,0,1,0,6,0,0,0],[5,0,3,0,0,2,0,0,8],[0,9,0,0,0,0,0,2,0]]},{"name":"Puzzle38","label":"Puzzle #38 (Easy)","size":9,"board":[[0,1,0,7,0,8,9,0,0],[3,0,0,0,0,9,0,8,0],[0,0,0,0,5,2,0,0,6],[8,0,0,0,7,0,2,4,9],[0,0,4,8,9,3,1,0,0],[9,5,7,0,4,0,0,0,3],[7,0,0,9,2,0,0,0,0],[0,6,0,3,0,0,0,0,2],[0,0,9,6,0,5,0,7,0]]},{"name":"Puzzle88","label":"Puzzle #88 (Medium)","size":9,"board":[[0,0,0,1,9,0,0,7,0],[0,0,8,0,0,0,0,0,3],[0,4,0,0,0,6,0,0,0],[9,0,0,0,1,0,6,0,0],[1,0,0,5,0,3,0,0,8],[0,0,4,0,7,0,0,0,2],[0,0,0,7,0,0,0,8,0],[6,0,0,0,0,0,7,0,0],[0,3,0,0,4,8,0,0,0]]},{"name":"Puzzle94","label":"Puzzle #94 (Medium)","size":9,"board":[[0,3,1,0,0,0,0,0,0],[7,0,8,0,2,0,0,0,1],[0,0,0,8,0,0,4,0,0],[0,7,0,0,3,6,0,0,0],[0,4,6,0,0,0,2,3,0],[0,0,0,5,7,0,0,4,0],[0,0,5,0,0,8,0,0,0],[6,0,0,0,5,0,1,0,2],[0,0,0,0,0,0,3,6,0]]},{"name":"Puzzle174","label":"Puzzle #74 (Hard)","size":9,"board":[[0,0,8,0,0,0,4,0,0],[0,0,0,4,0,5,0,0,0],[9,0,7,0,0,0,2,0,6],[0,6,0,0,3,0,0,7,0],[0,0,0,8,5,9,0,0,0],[0,8,0,0,7,0,0,1,0],[1,0,4,0,0,0,3,0,8],[0,0,0,2,0,3,0,0,0],[0,0,6,0,0,0,7,0,0]]},{"name":"Puzzle245","label":"Puzzle #245 (Hard)","size":9,"board":[[0,0,0,0,0,7,5,0,0],[5,0,0,3,0,0,0,0,0],[6,0,7,0,0,0,0,0,2],[0,0,2,0,0,3,7,0,0],[0,0,0,0,5,0,0,0,0],[0,0,3,4,0,0,8,0,0],[3,0,0,0,0,0,4,0,8],[0,0,0,0,0,4,0,0,9],[0,0,1,5,0,0,0,0,0]]},{"name":"Puzzle16x16","label":"Puzzle 16x16 (Hard)","size":16,"board":[[0,3,0,6,0,2,0,11,0,0,14,0,1,0,0,0],[16,0,0,14,0,0,0,0,8,0,0,0,0,15,0,0],[13,0,0,2,0,0,12,1,6,16,0,0,10,0,0,5],[0,0,10,0,9,0,5,0,1,3,2,0,0,16,0,6],[4,14,0,0,0,1,9,0,0,10,0,0,11,5,0,0],[11,2,12,0,13,0,0,5,0,14,0,0,0,0,6,9],[0,10,0,3,0,0,0,0,0,0,7,13,0,0,4,2],[0,0,16,0,7,0,3,0,0,0,6,2,13,0,15,0],[0,15,0,12,4,11,0,0,0,6,0,10,0,7,0,0],[9,11,0,0,6,5,0,0,0,0,0,0,4,0,12,0],[2,5,0,0,0,0,1,0,15,0,0,4,0,8,3,14],[0,0,4,1,0,0,8,0,0,2,13,0,0,0,10,16],[10,0,7,0,0,6,2,9,0,13,0,3,0,4,0,0],[5,0,0,11,0,0,13,3,2,4,0,0,14,0,0,10],[0,0,3,0,0,0,0,14,0,0,0,0,8,0,0,7],[0,0,0,4,0,16,0,0,12,0,8,0,15,0,1,0]]}]}')}},t={};class s{constructor(){this._knownNum=0,this._possNums=new Map([])}populatePossNums(e){for(let t=1;t<=e;t++)this._possNums.set(t,!0)}clearPossNums(){this._possNums.clear()}hasPossNum(e){return this._possNums.has(e)}getPossNums(){return Array.from(this._possNums.keys())}onePossNumLeft(){return 1===this._possNums.size?Array.from(this._possNums.keys())[0]:0}removePossNum(e){this._possNums.delete(e)}get knownNum(){return this._knownNum}set knownNum(e){this._knownNum=e,this._possNums.clear()}}const l=document.getElementById("OriginalPuzzle"),o=document.getElementById("ScannedPuzzle");class r{static appendText(e,t){e.value+=t+"\n"}}class i{constructor(e){switch(this._boardSize=0,this._blockSize=0,this._needEval=!1,this._setupDone=!1,this._cells=new Map([]),this._boardSize=e,this._boardSize){case 9:this._blockSize=3;break;case 16:this._blockSize=4;break;default:console.log("Invalid boardSize!")}for(let t=0;t<e;t++)for(let l=0;l<e;l++){let o=new s;o.populatePossNums(e),this._cells.set(this.getCellNum(t,l),o)}}getCellNum(e,t){return e*this._boardSize+t}getCell(e,t){return this._cells.get(this.getCellNum(e,t))}setCellKnown(e,t,s){this.getCell(e,t).knownNum=s,this.needEval=!0,!0===this.setupDone&&r.appendText(o,"Set cell ("+e+","+t+") to "+s),this.clearColumn(e,s),this.clearRow(t,s),this.clearBlock(e,t,s)}clearColumn(e,t){for(let s=0;s<this._boardSize;s++)this.getCell(e,s).removePossNum(t)}clearRow(e,t){for(let s=0;s<this._boardSize;s++)this.getCell(s,e).removePossNum(t)}clearBlock(e,t,s){let l=Math.floor(e/this._blockSize)*this._blockSize,o=Math.floor(t/this._blockSize)*this._blockSize;for(let r=l;r<l+this._blockSize;r++)for(let l=o;l<o+this._blockSize;l++)r===e&&l===t||this.getCell(r,l).removePossNum(s)}processBoardOnePossible(){for(let e=0;e<this._boardSize;e++)for(let t=0;t<this._boardSize;t++){let s=this.getCell(e,t).onePossNumLeft();if(s>0)return this.setCellKnown(e,t,s),!0}return!1}processBoardBlockSingleNumber(){let e,t;e=this._boardSize/this._blockSize,t=this._boardSize/this._blockSize;for(let s=0;s<e;s++)for(let l=0;l<t;l++){let o=new Map;for(let e=1;e<=this._boardSize;e++)o.set(e,[]);for(let r=s*e;r<s*e+e;r++)for(let e=l*t;e<l*t+t;e++)0===this.getCell(r,e).knownNum&&this.getCell(r,e).getPossNums().forEach((t=>{let s=o.get(t);s.push([r,e]),o.set(t,s)}));for(let e=1;e<=this._boardSize;e++){let t=o.get(e);if(1===t.length)return this.setCellKnown(t[0][0],t[0][1],e),!0}}return!1}processBoardStep(){this.needEval=!1,r.appendText(o,"Scanner #1 try"),this.processBoardBlockSingleNumber()||(r.appendText(o,"Scanner #2 try"),this.processBoardOnePossible())}printBoard(e){let t,s,l=this._boardSize>9?2:1;for(let o=0;o<this._boardSize;o++){let i=[];for(let e=0;e<this._boardSize;e++)t=this.getCell(e,o),t.knownNum>0?(s=t.knownNum.toString(),i.push("["+" ".repeat(l-s.length)+s+"]")):i.push("["+" ".repeat(l)+"]");r.appendText(e,i.join(""))}}get setupDone(){return this._setupDone}set setupDone(e){this._setupDone=e}get needEval(){return this._needEval}set needEval(e){this._needEval=e}}const n=function s(l){var o=t[l];if(void 0!==o)return o.exports;var r=t[l]={exports:{}};return e[l](r,r.exports,s),r.exports}(848),a=document.getElementById("scan"),u=document.getElementById("puzzles");a.addEventListener("click",(function(){if(z&&!1!==z.setupDone&&z){o.value="";let e=-1;for(;!0===z.needEval;)z.processBoardStep(),e++;r.appendText(o,"Finished With Board  ("+e+" moves)"),z.printBoard(o),o.scrollTop=o.scrollHeight,z.setupDone=!1}})),u.addEventListener("change",(function(){"Choose"!==u.value?(z=h(u.value),l.value="",o.value="",r.appendText(l,"Initial Board"),z.printBoard(l),z.setupDone=!0):(z=h(u.value),l.value="",o.value="",z.setupDone=!1)}));for(const e in n.puzzleList){const t=document.createElement("option");t.value=n.puzzleList[e].name,t.text=n.puzzleList[e].label,u.add(t)}let z;function h(e){let t;for(const s in n.puzzleList)if(n.puzzleList[s].name===e){let e=n.puzzleList[s].size;t=new i(e);for(let l=0;l<e;l++)for(let o=0;o<e;o++)n.puzzleList[s].board[l][o]>0&&t.setCellKnown(o,l,n.puzzleList[s].board[l][o]);return t}return new i(9)}})();